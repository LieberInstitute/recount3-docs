[["index.html", "recount3: human and mouse public RNA-seq data 1 Data 1.1 Human 1.2 Mouse 1.3 Study explorer 1.4 How to cite recount3", " recount3: human and mouse public RNA-seq data 1 Data recount3 provides processed RNA-seq data for human and mouse in file formats similar to recount2 (Figure 1.1), which at its core is based on coverage bigWig files and exon-exon junction counts (see Raw file for more details). These two raw files power the whole recount3 ecosystem. In recount3, we have provided coverage count files for several human and mouse annotations with samples grouped by study. Some large studies, like GTEx and TCGA have been fragmented at the tissue level to make the data more accessible. Figure 1.1: Overview of the data available in recount2 and recount3. Reads (pink boxes) aligned to the reference genome can be used to compute a base-pair coverage curve and identify exon-exon junctions (split reads). Gene and exon count matrices are generated using annotation information providing the gene (green boxes) and exon (blue boxes) coordinates together with the base-level coverage curve. The reads spanning exon-exon junctions (jx) are used to compute a third count matrix that might include unannotated junctions (jx 3 and 4). Without using annotation information, expressed regions (orange box) can be determined from the base-level coverage curve to then construct data-driven count matrices. The following annotations are supported in recount3. See Annotation files section for direct links to the annotation files. 1.1 Human Annotations: Gencode v26 Gencode v29 RefSeq FANTOM6_cat ERCC SIRV 1.2 Mouse Annotations: Gencode v23 1.3 Study explorer You can also open the study explorer independently through shinyapps.io. 1.4 How to cite recount3 Thank you for your continued support of the ReCount family of projects! We greatly appreciate you citing our work. print(citation(&quot;recount3&quot;)[2], bibtex = TRUE) ## ## Wilks C, Zheng SC, Chen FY, Charles R, Solomon B, Ling JP, Imada EL, ## Zhang D, Joseph L, Leek JT, Jaffe AE, Nellore A, Collado-Torres L, ## Hansen KD, Langmead B (2021). &quot;recount3: summaries and queries for ## large-scale RNA-seq expression and splicing.&quot; _bioRxiv_. doi: ## 10.1101/2021.05.21.445138 (URL: ## https://doi.org/10.1101/2021.05.21.445138), &lt;URL: ## https://doi.org/10.1101/2021.05.21.445138&gt;. ## ## A BibTeX entry for LaTeX users is ## ## @Article{, ## title = {recount3: summaries and queries for large-scale RNA-seq expression and splicing}, ## author = {Christopher Wilks and Shijie C. Zheng and Feng Yong Chen and Rone Charles and Brad Solomon and Jonathan P. Ling and Eddie Luidy Imada and David Zhang and Lance Joseph and Jeffrey T. Leek and Andrew E. Jaffe and Abhinav Nellore and Leonardo Collado-Torres and Kasper D. Hansen and Ben Langmead}, ## year = {2021}, ## journal = {bioRxiv}, ## doi = {10.1101/2021.05.21.445138}, ## url = {https://doi.org/10.1101/2021.05.21.445138}, ## } "],["quick-access.html", "2 Quick Access 2.1 Quick recount3 2.2 Quick snapcount 2.3 Quick raw files", " 2 Quick Access The data from the recount3 project is accessible through R/Bioconductor packages as well as raw files. You can access the data through: recount3: this R/Bioconductor package retrieves the data from the IDIES servers and builds RangedSummarizedExperiment objects by study that can be used with many Bioconductor analysis packages for downstream analyses (DOI: 10.1038/nmeth.3252). snapcount: this R/Bioconductor package also provides access to data from recount2 and recount3 through a query-based interface. raw files: these are text files that are hosted by IDIES and can be used with other programming software outside of R. As noted in the Bioconductor chapter, detailed vignette documents showing further details of our R/Bioconductor packages are available from the Bioconductor landing pages, such as the one called recount3 quick start guide. 2.1 Quick recount3 If you want to access the data recount3, here’s some R code that you can use. See the Bioconductor chapter for the full output of these commands and more details. ## Install the recount3 R/Bioconductor package if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;recount3&quot;) ## Load recount3 R package library(&quot;recount3&quot;) ## Find all available human projects human_projects &lt;- available_projects() ## Find the project you are interested in, ## here we use SRP009615 as an example proj_info &lt;- subset( human_projects, project == &quot;SRP009615&quot; &amp; project_type == &quot;data_sources&quot; ) ## Create a RangedSummarizedExperiment (RSE) object at the gene level rse_gene_SRP009615 &lt;- create_rse(proj_info) ## Explore that RSE object rse_gene_SRP009615 2.2 Quick snapcount If you want to access the data through queries such as a set of regions or annotation features instead of downloading the data at a project-level, we recommend using snapcount. It is an R/Bioconductor package for interfacing with Snaptron’s REST API. Here’s some example code you can use to get started with snapcount. ## Install the snapcount R/Bioconductor package if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;snapcount&quot;) ## Load snapcount R package library(&quot;snapcount&quot;) ## snapcount can be used with either a procedural interface query_jx(compilation = &quot;gtex&quot;, regions = &quot;CD99&quot;) query_jx(compilation = &quot;gtex&quot;, regions = &quot;CD99&quot;, range_filters = samples_count == 10) ## or using the query-builder class sb &lt;- SnaptronQueryBuilder$new() sb$compilation(&quot;gtex&quot;)$regions(&quot;CD99&quot;)$query_jx() 2.3 Quick raw files The raw recount3 files are hosted by IDIES and are publicly available. We separated every piece of information into its own file. These files can be accessed without using R through your own favorite programming solution. For example, the files for human study SRP009615 annotated with GENCODE v26 are: Metadata files: http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.sra.SRP009615.MD.gz http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_project.SRP009615.MD.gz http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_qc.SRP009615.MD.gz http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_seq_qc.SRP009615.MD.gz http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_pred.SRP009615.MD.gz Gene files: http://duffel.rail.bio/recount3/human/data_sources/sra/gene_sums/15/SRP009615/sra.gene_sums.SRP009615.G026.gz Annotation files: http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.G026.gtf.gz If you are interested in exploring what are the available projects in recount3, you might be interested in accessing: http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/sra.recount_project.MD.gz http://duffel.rail.bio/recount3/human/data_sources/gtex/metadata/gtex.recount_project.MD.gz http://duffel.rail.bio/recount3/human/data_sources/tcga/metadata/tcga.recount_project.MD.gz For more details about the structure of these files, check the Raw Files chapter. "],["how-to-ask-for-help.html", "3 How to ask for help 3.1 Gitter 3.2 Bioconductor Support website 3.3 GitHub Issues", " 3 How to ask for help In general we prefer that you contact us through a public forum such that others can benefit from your answers, so please avoid emails as much as possible. Leonardo has written a more extensive page on how to ask for help in general beyond this project which might be useful for you. While we have multiple options for you to contact us, please avoid posting your question in all the forums. 3.1 Gitter We have several Gitter chats setup in relation to our software. Here’s some of them: Megadepth: https://gitter.im/megadepth/community Snaptron: https://gitter.im/snaptron/Lobby 3.2 Bioconductor Support website For our R/Bioconductor packages, you can ask for help through the Bioconductor support website using the appropriate tags: recount3: https://support.bioconductor.org/tag/recount3/ snapcount: https://support.bioconductor.org/tag/snapcount/ megadepth: https://support.bioconductor.org/tag/megadepth/ 3.3 GitHub Issues You can also report bugs through GitHub issues. Ideally, use the repository that contains the code that has produced the bug. For example, for the recount3 R/Bioconductor package use https://github.com/LieberInstitute/recount3/issues. Here’s a list of possible locations: R/Bioconductor related: recount3: https://github.com/LieberInstitute/recount3/issues megadepth: https://github.com/LieberInstitute/megadepth/issues snapcount: https://github.com/langmead-lab/snapcount/issues Tools: Megadepth: https://github.com/ChristopherWilks/megadepth/issues Snaptron: https://github.com/ChristopherWilks/snaptron/issues Monorail system related: monorail-external: https://github.com/langmead-lab/monorail-external/issues recount-pump: https://github.com/langmead-lab/recount-pump/issues recount-unify: https://github.com/langmead-lab/recount-unify/issues Documentation related: recount3-docs: https://github.com/LieberInstitute/recount3-docs/issues (where this website is created) "],["quality-check-fields.html", "4 Quality check fields", " 4 Quality check fields We used a number of tools to collect potentially useful quality-control (QC) measures. Specifically, we used seqtk (Li 2020 (accessed August 18, 2020)), the idxstats subcommand of samtools, the output of STAR, our own megadepth tool, and featureCounts. We examine each in turn, listing the specific QC measures calculated be each. Monorail runs the seqtk fqchk command on input FASTQ files to collect base-quality and base-composition summaries for all sequencing cycles. We distill these into a few QC measures included with every summarized run in recount3. min_len: minimum read length max_len: maximum read length avg_len: average read length #distinct_quality_values: number of different quality scores present in the sequence run’s base qualities #bases: total number of bases across spots (not including both read mates if paired) %A: percent of bases that are A %C: percent of bases that are C %G: percent of bases that are G %T: percent of bases that are T %N: percent of bases that are N avgQ: weighted average over Phred quality scores present in the sequence run, where weights are the Phred quality values themselves errQ: negatively scaled log of the weighted average Phred quality scores present in the sequence run, where weights are the error probabilities associated with the Phred quality scores Monorail uses STAR to align RNA-seq reads in a spliced fashion to a reference genome, without using any annotation. Files output by STAR, particularly the Log.out and Log.final.out, report a number of measures that can be used for QC. We compile these into a number of QC measures included with every summarized run in recount3. Note that some of these measures are reported separately for the two ends of a paired-end read. We omit the second-end versions of these QC measures here for space reasons. From the STAR manual (version 2.7.2b): Log.final.out: summary mapping statistics after mapping job is complete, very useful for quality control. The statistics are calculated for each read (single- or paired-end) and then summed or averaged over all reads. Note that STAR counts a paired-end read as one read, (unlike the samtools flagstat/idxstats, which count each mate separately). Most of the information is collected about the UNIQUE mappers (unlike samtools flagstat/idxstats which does not separate unique or multi-mappers). Each splicing is counted in the numbers of splices, which would correspond to summing the counts in SJ.out.tab. The mismatch/indel error rates are calculated on a per base basis, i.e. as total number of mismatches/indels in all unique mappers divided by the total number of mapped bases. Some of the following definitions include text from the STAR manual/source code, reprinted here for convenience. Please see the STAR manual for more in depth information. %_of_chimeric_reads: Number of chimeric reads divided by number of input reads %_of_reads_mapped_to_multiple_loci: Number of reads mapped to multiple loci divided by number of input reads %_of_reads_mapped_to_too_many_loci: Number of reads mapped to (&gt; 10) loci divided by number of input reads %_of_reads_unmapped:_other: Reads are unmapped due to no acceptable seed/windows divided by number of input reads %_of_reads_unmapped:_too_many_mismatches: Number of reads where best alignment has more mismatches than max allowed number of mismatches divided by number of input reads %_of_reads_unmapped:_too_short: Number of reads where best alignment was shorter than min allowed mapped length divided by number of input reads all_mapped_reads: Total number of reads aligned average_input_read_length: Average length of a read average_mapped_length: Average length of an alignment deletion_average_length: Average length of a genomic deletion, i.e. genomic gaps deletion_rate_per_base: Genomic deletions per mapped base insertion_average_length: Average length of a genomic insertion, i.e. read gaps insertion_rate_per_base: Genomics insertions per mapped base mapping_speed_million_of_reads_per_hour: How fast it was to align this sample mismatch_rate_per_base_%: Mismatches per mapped base number_of_chimeric_reads: Total number of reads which were fragmented on aligning, e.g. fusion potential reads number_of_input_reads: Total number of reads input to STAR number_of_reads_mapped_to_multiple_loci: Number of reads mapped to multiple loci number_of_reads_mapped_to_too_many_loci: Number of reads mapped to (&gt; 10) loci number_of_reads_unmapped:_other: Number of reads left unmapped due to no acceptable seed/windows number_of_reads_unmapped:_too_many_mismatches: Number of reads where best alignment has more mismatches than max allowed number of mismatches number_of_reads_unmapped:_too_short: Number of reads where best alignment was shorter than min allowed mapped length number_of_splices:_at/ac: Number of canonical splices of AT-AC (and reverse) number_of_splices:_annotated_(sjdb): Number of splices found that were also in the annotation database number_of_splices:_gc/ag: Number of canonical splices of GC-AG (and reverse) number_of_splices:_gt/ag: Number of canonical splices of GT-AG (and reverse) number_of_splices:_non-canonical: Number of non-canonical splices, anything not GT-AG, AT-AC, GC-AG, or their reverse complement number_of_splices:_total: Total number of splices uniquely_mapped_reads_%: Number of reads which mapped to a single locus divided by number of input reads uniquely_mapped_reads_number: Number of reads which mapped to a single locus Monorail runs the samtools idxstats on the BAM file output by STAR to collect statistics about how many reads aligned to each chromosome in the genome assembly. This can be helpful in, for instance, confirming the sex of the individual sequenced based on alignments to sex chromosomes, or measuring effectiveness of ribosomal RNA depletion by considering the fraction of reads aligned to the mitochondrial genome. We compile these into a number of QC measures included with every summarized run in recount3: aligned_reads%.chrm: Percent of reads aligning to the mitochondrial genome. aligned_reads%.chrx: Percent of reads aligning to chromosome X. aligned_reads%.chry: Precent of reads aligning to chromosome Y. Monorail runs our megadepth tool on the BAM files output by STAR. The chief function is to convert BAM files to bigWig files that are then added to the recount3 archive. As megadepth performs this conversion, it also summarizes the amount of sequencing coverage within the intervals of a provided BED file representing a gene annotation. These quantifications can be useful for quality control, tell us, for example, what fraction of the coverage is within annotated genes. Fragment length distribution is based on a special read filter only applied for this purpose to be compatible with CSAW’s fragment counting approach (Lun and Smyth 2016), paired reads in a passing fragment must not be secondary, supplementary, have conflicting read order, be unmapped or be mapped on more than one chromosome. The bc_ prefix here refers to the previous name of the Megadepth tool.1 bc_auc.all_reads_all_bases: Area under coverage (total depth of coverage evaluated at all bases) for all alignments bc_auc.all_reads_annotated_bases: Area under coverage for all alignments, but only for bases in annotated exons bc_auc.unique_reads_all_bases: Area under coverage for uniquely aligned reads bc_auc.unique_reads_annotated_bases: Area under coverage for uniquely aligned reads, but only for bases in annotated exons bc_auc.all_%: bc_auc.all_reads_annotated_bases divided by bc_auc.all_reads_all_bases bc_auc.unique_%: bc_auc.unique_reads_annotated_bases divided by bc_auc.unique_reads_all_bases bc_frag.count: Total number of read fragments in BAM after filtering bc_frag.kallisto_count: Number of read fragments (&lt; 1000) bp in length in BAM after filtering bc_frag.kallisto_mean_length: Mean length of read fragments (&lt; 1000) bp in length in BAM after filtering bc_frag.mean_length: Mean length of all read fragments in BAM after filtering bc_frag.mode_length: Mode of the read fragment length of all fragments in BAM after filtering bc_frag.mode_length_count: Number of read fraqments with the bc_frag.mode_length in BAM after filtering Finally, Monorail runs featureCounts on the BAM files output by STAR. This provides a second opinion on the quantifications produced by megadepth. While we have not yet found compelling examples where the megadepth and featureCounts outputs disagree, we keep summaries of the featureCounts quantifications as potential QC measures. exon_fc.all_%: exon_fc_count_all.assigned divided by all_mapped_reads (from STAR) exon_fc.unique_%: exon_fc_count_unique.assigned divided by uniquely_mapped_reads_number (from STAR) exon_fc_count_all.total: Total number of fragments, including multi-mappers, input to featureCounts exon_fc_count_all.assigned: Number of fragments, including multi-mappers, assigned by featureCounts to an exon exon_fc_count_unique.total: Total number of uniquely mapping fragments input to featureCounts exon_fc_count_unique.assigned: Number of uniquely mapping fragments assigned by featureCounts to an exon gene_fc.all_%: gene_fc_count_all.assigned divided by all_mapped_reads (from STAR) gene_fc.unique_%: gene_fc_count_unique.assigned divided by uniquely_mapped_reads_number (from STAR) gene_fc_count_all.total: Total number of fragments, including multi-mappers, input to featureCounts gene_fc_count_all.assigned: Number of fragments, including multi-mappers, assigned by featureCounts to a gene gene_fc_count_unique.total: Total number of uniquely mapping fragments input to featureCounts gene_fc_count_unique.assigned: Number of uniquely mapping fragments assigned by featureCounts to a gene References "],["bioconductor.html", "5 Bioconductor 5.1 recount3 5.2 snapcount 5.3 megadepth", " 5 Bioconductor R is an open source software programming language that has been widely used for studying gene expression data thanks in part to the Bioconductor project. You can install R for free from CRAN on macOS, Windows, and Linux operating systems. The Bioconductor community has defined common structures that enable users to store their data in common formats and analyzed through many different solutions (DOI: 10.1038/nmeth.3252). One such common format is the RangedSummarizedExperiment object from the SummarizedExperiment package that can then be used in downstream analayses of differential expression using packages such as DESeq2, edgeR, and limma. To facilitate the re-analysis of public expression data, we have provided several R/Bioconductor packages that interface with the recount3 data. These are: recount3 snapcount megadepth These packages can also benefit from using recount and derfinder, which we made in earlier phases of the ReCount project. In the Bioconductor landing pages for our packages you can find detailed vignette documents, such as the one called recount3 quick start guide. Vignette documents are user guides illustrating how the different functions in a given R package can be used together. The code shown in this chapter is a subset from these vignette documents, thus we highly recommend that you read the vignettes if you want to learn more details about these R packages than what we have illustrated here. 5.1 recount3 The following information is taken from the recount3 documentation. After installing recount3, we need to load the package, which will automatically load the required dependencies. ## Load recount3 R package library(&quot;recount3&quot;) If you have identified a study of interest and want to access the gene level expression data, use create_rse() as shown below. create_rse() has arguments that will allow you to specify the annotation of interest for the given organism, and whether you want to download gene, exon or exon-exon junction expression data. ## Find all available human projects human_projects &lt;- available_projects() ## 2021-08-20 20:24:25 caching file sra.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/sra.recount_project.MD.gz&#39; ## 2021-08-20 20:24:30 caching file gtex.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/gtex/metadata/gtex.recount_project.MD.gz&#39; ## 2021-08-20 20:24:32 caching file tcga.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/tcga/metadata/tcga.recount_project.MD.gz&#39; ## Find the project you are interested in, ## here we use SRP009615 as an example proj_info &lt;- subset( human_projects, project == &quot;SRP009615&quot; &amp; project_type == &quot;data_sources&quot; ) ## Create a RangedSummarizedExperiment (RSE) object at the gene level rse_gene_SRP009615 &lt;- create_rse(proj_info) ## 2021-08-20 20:24:41 downloading and reading the metadata. ## 2021-08-20 20:24:43 caching file sra.sra.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.sra.SRP009615.MD.gz&#39; ## 2021-08-20 20:24:44 caching file sra.recount_project.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_project.SRP009615.MD.gz&#39; ## 2021-08-20 20:24:46 caching file sra.recount_qc.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_qc.SRP009615.MD.gz&#39; ## 2021-08-20 20:24:48 caching file sra.recount_seq_qc.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_seq_qc.SRP009615.MD.gz&#39; ## 2021-08-20 20:24:49 caching file sra.recount_pred.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_pred.SRP009615.MD.gz&#39; ## 2021-08-20 20:24:52 downloading and reading the feature information. ## 2021-08-20 20:24:52 caching file human.gene_sums.G026.gtf.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.G026.gtf.gz&#39; ## 2021-08-20 20:24:57 downloading and reading the counts: 12 samples across 63856 features. ## 2021-08-20 20:24:58 caching file sra.gene_sums.SRP009615.G026.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/gene_sums/15/SRP009615/sra.gene_sums.SRP009615.G026.gz&#39; ## 2021-08-20 20:25:02 construcing the RangedSummarizedExperiment (rse) object. ## Explore that RSE object rse_gene_SRP009615 ## class: RangedSummarizedExperiment ## dim: 63856 12 ## metadata(8): time_created recount3_version ... annotation recount3_url ## assays(1): raw_counts ## rownames(63856): ENSG00000278704.1 ENSG00000277400.1 ... ## ENSG00000182484.15_PAR_Y ENSG00000227159.8_PAR_Y ## rowData names(10): source type ... havana_gene tag ## colnames(12): SRR387777 SRR387778 ... SRR389077 SRR389078 ## colData names(175): rail_id external_id ... ## recount_pred.curated.cell_line BigWigURL You can also interactively choose your study of interest ## Note that you can interactively explore the available projects proj_info_interactive &lt;- interactiveDisplayBase::display(human_projects) ## Select a single row, then hit &quot;send&quot;. The following code checks this. stopifnot(nrow(proj_info_interactive) == 1) ## Then create the RSE object rse_gene_interactive &lt;- create_rse(proj_info_interactive) Once you have a RSE file, you can use transform_counts() to transform the raw coverage counts. ## Once you have your RSE object, you can transform the raw coverage ## base-pair coverage counts using transform_counts(). ## For RPKM, TPM or read outputs, check the details in transform_counts(). assay(rse_gene_SRP009615, &quot;counts&quot;) &lt;- transform_counts(rse_gene_SRP009615) Now you are ready to continue with downstream analysis software. recount3 also supports accessing the BigWig raw coverage files as well as specific study or collection sample metadata. Please continue to the users guide for more detailed information. 5.2 snapcount The following information is taken from the snapcount documentation. As stated in the documentation, snapcount provides access to data from the recount2 project, but it can also be used with the data from the recount3 project. To get started, we need to load the snapcount package into our R session. This will load all the required dependencies. library(&quot;snapcount&quot;) snapcount makes it easy to query the Snaptron web services, with results presented as RangedSummarizedExperiment objects. You can query measurements for genes, exons, splice junctions and coverage vectors from the RNA-seq samples indexed in Snaptron. Samples are organized into compilations (e.g. srav2) that altogether contain the same studies and summaries in the recount resource. Queries can be filtered to narrow the focus to particular genes or genomic intervals, to events with certain prevalence, to events that do or don’t appear in gene annotation, or to samples with particular metadata. snapcount complements the recount package, which also allows for searching by coordinates or by HUGO gene names. In general, recount works best when you are interested in all the genes, exons, or splice junctions in a study, whereas snapcount is best for queries over a particular subset of genes or intervals across all or most of the samples in recount2/Snaptron. The more specific your query, the faster and easier it will be to use snapcount. All the RNA-seq samples in the recount and Snaptron resources were analyzed using the Rail-RNA aligner. Rail produces spliced alignments that in turn produce coverage and junction-level summaries that are further processed to obtain the data in recount and Snaptron. Similar to the recount all coverage counts in Snaptron/snapcount are stored/retrieved as raw, un-normalized counts. 5.2.1 Basic queries A basic query returns a RangedSummarizedExperiment (RSE) object with one or more features (genes, exons, or splice junctions) as rowRanges. Raw coverage counts are returned as the counts assay in the RSE Full sample metadata is returned as the colData of the RSE Basic queries include: exon-exon splice junction counts: query_jx exon-level quantifications: query_exon genes-level quantifications: query_gene The Gencode v25 annotation defines what genes and exons can be queried (as in recount). For splice junctions, both annotated and novel junctions are queried at the same time unless one is explicitly filtered. Metadata columns will vary by compilation (e.g. TCGA vs. GTEx). Please be cautious with metadata. We strive to make it as complete and usable as possible, but it can still be incomplete, incorrect or inconsistently formatted (e.g. “age” in the srav2 compilation). Start by querying for all junctions within the region of gene CD99: ##Query coverage for gene, exon, and annotated junctions across all #in the region of the CD99 gene #from GTEx v6 sample compilation #CD99 is chosen for its size sb &lt;- QueryBuilder(compilation=&quot;gtex&quot;, regions=&quot;CD99&quot;) cd99.gene &lt;- query_gene(sb) dim(cd99.gene) ## [1] 1 9662 head(cd99.gene) ## class: RangedSummarizedExperiment ## dim: 1 9662 ## metadata(1): uri ## assays(1): counts ## rownames(1): 23 ## rowData names(12): DataSource:Type snaptron_id ... coverage_median ## compilation_id ## colnames(9662): rail_50099 rail_50100 ... rail_59759 rail_59760 ## colData names(322): rail_id Run ... junction_coverage ## junction_avg_coverage Now query for junctions: ##Query all exon-exon splice junctions within the region of gene CD99 cd99.jx.all &lt;- query_jx(sb) dim(cd99.jx.all) ## [1] 3485 9662 cd99.jx.all ## class: RangedSummarizedExperiment ## dim: 3485 9662 ## metadata(1): uri ## assays(1): counts ## rownames(3485): 28340058 28340273 ... 28352407 28352408 ## rowData names(12): DataSource:Type snaptron_id ... coverage_median ## source_dataset_id ## colnames(9662): rail_50099 rail_50100 ... rail_59759 rail_59760 ## colData names(322): rail_id Run ... junction_coverage ## junction_avg_coverage Now query for junctions and filter by sample type: Brain: #now subfilter by sample tissue #GTEx samples that are labeled with tissue type &quot;Brain&quot; sb &lt;- set_column_filters(sb, SMTS == &quot;Brain&quot;) cd99.jx.all &lt;- query_jx(sb) dim(cd99.jx.all) ## [1] 637 1409 head(cd99.jx.all) ## class: RangedSummarizedExperiment ## dim: 6 1409 ## metadata(1): uri ## assays(1): counts ## rownames(6): 28340058 28341126 ... 28341507 28341508 ## rowData names(12): DataSource:Type snaptron_id ... coverage_median ## source_dataset_id ## colnames(1409): rail_50099 rail_50105 ... rail_59748 rail_59753 ## colData names(322): rail_id Run ... junction_coverage ## junction_avg_coverage Same query/filter again but for exons: cd99.exon &lt;- query_exon(sb) dim(cd99.exon) ## [1] 32 1409 head(cd99.exon) ## class: RangedSummarizedExperiment ## dim: 6 1409 ## metadata(1): uri ## assays(1): counts ## rownames(6): 691 692 ... 695 696 ## rowData names(12): DataSource:Type snaptron_id ... coverage_median ## compilation_id ## colnames(1409): rail_50099 rail_50105 ... rail_59748 rail_59753 ## colData names(322): rail_id Run ... junction_coverage ## junction_avg_coverage Now query junctions but further filter for only those which are fully annotated: ###Only query junctions which are fully annotated---both left and #right splice sites are found together in one or more of the #Snaptron sourced annotations sb &lt;- set_row_filters(sb, annotated == 1) cd99.jx &lt;- query_jx(sb) dim(cd99.jx) ## [1] 23 1409 head(cd99.jx) ## class: RangedSummarizedExperiment ## dim: 6 1409 ## metadata(1): uri ## assays(1): counts ## rownames(6): 28350154 28350172 ... 28350658 28350686 ## rowData names(12): DataSource:Type snaptron_id ... coverage_median ## source_dataset_id ## colnames(1409): rail_50099 rail_50105 ... rail_59748 rail_59753 ## colData names(322): rail_id Run ... junction_coverage ## junction_avg_coverage Now check an example of the metadata stored in the RSE, InsertSize: ##Metadata is stored directly in the RSE object. #For example the library insert size can be retrieved #across all runs in the RSE head(cd99.jx.all$InsertSize) ## [1] 162 302 163 150 223 150 5.3 megadepth The following information is taken from the megadepth documentation. To get started, we need to load the megadepth package into our R session. This will load all the required dependencies. library(&quot;megadepth&quot;) Once we have the R package loaded, we need to install the Megadepth software. We can do so with install_megadepth(), which downloads a binary for your OS (Linux, Windows or macOS).2 We can then use with an example BigWig file to compute the coverage at a set of regions. ## Install the latest version of Megadepth install_megadepth(force = TRUE) ## The latest megadepth version is 1.1.0c ## This is not an interactive session, therefore megadepth has been installed temporarily to ## /tmp/RtmpdQaTvc/megadepth Next, we might want to use megadepth to quantify the coverage at a set of regions of the genome of interest to us. Here we will use two example files that are include in the package for illustration and testing purposes. One of them is a bigWig file that contains the base-pair coverage information for a sample of interest and the second one is BED file which contains the genomic region coordinates of interest. So we first locate them. ## Next, we locate the example BigWig and annotation files example_bw &lt;- system.file(&quot;tests&quot;, &quot;test.bam.all.bw&quot;, package = &quot;megadepth&quot;, mustWork = TRUE ) annotation_file &lt;- system.file(&quot;tests&quot;, &quot;testbw2.bed&quot;, package = &quot;megadepth&quot;, mustWork = TRUE ) ## Where are they? example_bw ## [1] &quot;/usr/local/lib/R/host-site-library/megadepth/tests/test.bam.all.bw&quot; annotation_file ## [1] &quot;/usr/local/lib/R/host-site-library/megadepth/tests/testbw2.bed&quot; Once we have located the example files we can proceed to calculating the base-pair coverage for our genomic regions of interest. There are several ways to do this with megadepth, but here we use the user-friendly function get_coverage(). This function will perform a given operation op on the bigWig file for a given set of regions of interest (annotation). One of those operations is to compute the mean base-pair coverage for each input region. This is what we’ll do with our example bigWig file. ## We can then use megadepth to compute the coverage bw_cov &lt;- get_coverage( example_bw, op = &quot;mean&quot;, annotation = annotation_file ) bw_cov ## GRanges object with 4 ranges and 1 metadata column: ## seqnames ranges strand | score ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;numeric&gt; ## [1] chr10 0-10 * | 0.00 ## [2] chr10 8756697-8756762 * | 15.85 ## [3] chr10 4359156-4359188 * | 3.00 ## [4] GL000219.1 168500-168620 * | 1.26 ## ------- ## seqinfo: 2 sequences from an unspecified genome; no seqlengths get_coverage() returns an object that is familiar to GenomicRanges users, that is, a GRanges object that can be used with other Bioconductor software packages. This example is just the tip of the iceberg, as Megadepth and thus megadepth can do a lot of useful processing operations on BAM and bigWig files. Please continue to the users guide for more detailed information. Please check Megadepth for instructions on how to compile the software from source if the binary version doesn’t work for you.↩︎ "],["raw-files.html", "6 Raw Files 6.1 Data source vs collection 6.2 Annotation files 6.3 Project-level count files 6.4 Project-level metadata files 6.5 Sample-level BigWig files", " 6 Raw Files Explain the raw file formats we have and how they are organized 6.1 Data source vs collection A data source specifies where the data is hosted at, most commonly from the Sequence Read Archive (SRA). A collection is a manually curated set of samples from one or more studies. A collection has a custom metadata file where the curator(s) can specify metadata variables for the collection. In other words: data_source: samples from the original data origin collection: manually selected samples with curated collection-specific sample metadata 6.2 Annotation files Here are the direct links in case you are interested in downloading the annotation files directly. (#tab:ann_files)Annotation files organism type annotation file_extension URL human gene gencode_v26 G026 http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.G026.gtf.gz human gene gencode_v29 G029 http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.G029.gtf.gz human gene fantom6_cat F006 http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.F006.gtf.gz human gene refseq R109 http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.R109.gtf.gz human gene ercc ERCC http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.ERCC.gtf.gz human gene sirv SIRV http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.SIRV.gtf.gz human exon gencode_v26 G026 http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.G026.gtf.gz human exon gencode_v29 G029 http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.G029.gtf.gz human exon fantom6_cat F006 http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.F006.gtf.gz human exon refseq R109 http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.R109.gtf.gz human exon ercc ERCC http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.ERCC.gtf.gz human exon sirv SIRV http://duffel.rail.bio/recount3/human/annotations/exon_sums/human.exon_sums.SIRV.gtf.gz mouse gene gencode_v23 M023 http://duffel.rail.bio/recount3/mouse/annotations/gene_sums/mouse.gene_sums.M023.gtf.gz mouse exon gencode_v23 M023 http://duffel.rail.bio/recount3/mouse/annotations/exon_sums/mouse.exon_sums.M023.gtf.gz On the R package, you can use recount3::locate_url_ann() to obtain these URLs. The URL structure is: &lt;recount3_url&gt;/&lt;organism&gt;/annotations/&lt;gene|exon&gt;_sums/&lt;organism&gt;.&lt;gene|exon&gt;_sums.&lt;annotation file extension&gt;.gtf.gz These are the annotation file extensions; human: Gencode v26: G026 Gencode v29: G029 RefSeq: ERCC FANTOM6_cat: F006 ERCC: R109 SIRV: SIRV Mouse: Gencode v23: M023 6.3 Project-level count files For every project, we have files at the gene, exon, and exon-exon junction expression levels. For genes and exons, we provide a file for each of the annotations. That is, for every project we provide: gene files: one count matrix per annotation exon files: one count matrix per annotation 3 exon-exon junction files: the sparse count matrix data in Matrix Market (MM) format, the small list of sample identifiers (IDs), and the exon-exon junctions coordinate information (RR file) All these files can be located with recount3::locate_url(). The following R code creates a table with links to the files for the default annotation for each organism. Note that you can replace the annotation file extension (like G026) for the corresponding one for annotation annotation shown in the previous section (or use recount3::annotation_ext() to see available options). ## Obtain all available projects projects &lt;- rbind( recount3::available_projects(&quot;human&quot;), recount3::available_projects(&quot;mouse&quot;) ) ## Locate the project raw files at the gene level using the default annotation projects$gene &lt;- apply(projects, 1, function(x) locate_url( project = x[&quot;project&quot;], project_home = x[&quot;project_home&quot;], type = &quot;gene&quot;, organism = x[&quot;organism&quot;], annotation = annotation_options(x[&quot;organism&quot;])[1] # Use default annotation )) ## Locate the project raw files at the exon level using the default annotation projects$exon &lt;- apply(projects, 1, function(x) locate_url( project = x[&quot;project&quot;], project_home = x[&quot;project_home&quot;], type = &quot;exon&quot;, organism = x[&quot;organism&quot;], annotation = annotation_options(x[&quot;organism&quot;])[1] # Use default annotation )) ## Locate the project raw exon-exon junction files projects &lt;- cbind(projects, do.call(rbind, apply(projects, 1, function(x) { x &lt;- locate_url( project = x[&quot;project&quot;], project_home = x[&quot;project_home&quot;], type = &quot;jxn&quot;, organism = x[&quot;organism&quot;] ) res &lt;- data.frame(t(x)) colnames(res) &lt;- paste0(&quot;jxn_&quot;, gsub(&quot;^.*\\\\.&quot;, &quot;&quot;, gsub(&quot;\\\\.gz&quot;, &quot;&quot;, colnames(res)))) return(res) }))) rownames(projects) &lt;- NULL ## Dimensions of the table dim(projects) # [1] 18830 11 ## Export write.csv(projects, file = &quot;recount3_raw_project_files_with_default_annotation.csv&quot;, row.names = FALSE) As a teaser, here you can see the first 20 rows of this long table. Or you can download the CSV file to your computer from GitHub. (#tab:project_raw_files_table)First 20 raw project files project organism file_source project_home project_type gene exon jxn_MM jxn_RR jxn_ID SRP107565 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP107565/sra.gene_sums.SRP107565.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP107565/sra.exon_sums.SRP107565.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP107565/sra.junctions.SRP107565.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP107565/sra.junctions.SRP107565.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP107565/sra.junctions.SRP107565.ALL.ID.gz SRP149665 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP149665/sra.gene_sums.SRP149665.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP149665/sra.exon_sums.SRP149665.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP149665/sra.junctions.SRP149665.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP149665/sra.junctions.SRP149665.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP149665/sra.junctions.SRP149665.ALL.ID.gz SRP017465 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP017465/sra.gene_sums.SRP017465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP017465/sra.exon_sums.SRP017465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP017465/sra.junctions.SRP017465.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP017465/sra.junctions.SRP017465.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP017465/sra.junctions.SRP017465.ALL.ID.gz SRP119165 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP119165/sra.gene_sums.SRP119165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP119165/sra.exon_sums.SRP119165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP119165/sra.junctions.SRP119165.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP119165/sra.junctions.SRP119165.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP119165/sra.junctions.SRP119165.ALL.ID.gz SRP133965 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP133965/sra.gene_sums.SRP133965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP133965/sra.exon_sums.SRP133965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP133965/sra.junctions.SRP133965.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP133965/sra.junctions.SRP133965.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP133965/sra.junctions.SRP133965.ALL.ID.gz SRP096765 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP096765/sra.gene_sums.SRP096765.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP096765/sra.exon_sums.SRP096765.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP096765/sra.junctions.SRP096765.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP096765/sra.junctions.SRP096765.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP096765/sra.junctions.SRP096765.ALL.ID.gz SRP124965 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP124965/sra.gene_sums.SRP124965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP124965/sra.exon_sums.SRP124965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP124965/sra.junctions.SRP124965.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP124965/sra.junctions.SRP124965.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP124965/sra.junctions.SRP124965.ALL.ID.gz SRP189165 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP189165/sra.gene_sums.SRP189165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP189165/sra.exon_sums.SRP189165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP189165/sra.junctions.SRP189165.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP189165/sra.junctions.SRP189165.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP189165/sra.junctions.SRP189165.ALL.ID.gz SRP050365 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP050365/sra.gene_sums.SRP050365.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP050365/sra.exon_sums.SRP050365.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP050365/sra.junctions.SRP050365.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP050365/sra.junctions.SRP050365.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP050365/sra.junctions.SRP050365.ALL.ID.gz SRP123065 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP123065/sra.gene_sums.SRP123065.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP123065/sra.exon_sums.SRP123065.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP123065/sra.junctions.SRP123065.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP123065/sra.junctions.SRP123065.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP123065/sra.junctions.SRP123065.ALL.ID.gz SRP162465 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP162465/sra.gene_sums.SRP162465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP162465/sra.exon_sums.SRP162465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP162465/sra.junctions.SRP162465.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP162465/sra.junctions.SRP162465.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP162465/sra.junctions.SRP162465.ALL.ID.gz SRP178865 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP178865/sra.gene_sums.SRP178865.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP178865/sra.exon_sums.SRP178865.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP178865/sra.junctions.SRP178865.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP178865/sra.junctions.SRP178865.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP178865/sra.junctions.SRP178865.ALL.ID.gz SRP032165 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP032165/sra.gene_sums.SRP032165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP032165/sra.exon_sums.SRP032165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP032165/sra.junctions.SRP032165.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP032165/sra.junctions.SRP032165.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP032165/sra.junctions.SRP032165.ALL.ID.gz SRP125965 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP125965/sra.gene_sums.SRP125965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP125965/sra.exon_sums.SRP125965.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP125965/sra.junctions.SRP125965.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP125965/sra.junctions.SRP125965.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP125965/sra.junctions.SRP125965.ALL.ID.gz SRP120165 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP120165/sra.gene_sums.SRP120165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP120165/sra.exon_sums.SRP120165.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP120165/sra.junctions.SRP120165.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP120165/sra.junctions.SRP120165.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP120165/sra.junctions.SRP120165.ALL.ID.gz SRP044265 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP044265/sra.gene_sums.SRP044265.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP044265/sra.exon_sums.SRP044265.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP044265/sra.junctions.SRP044265.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP044265/sra.junctions.SRP044265.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP044265/sra.junctions.SRP044265.ALL.ID.gz SRP014565 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP014565/sra.gene_sums.SRP014565.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP014565/sra.exon_sums.SRP014565.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP014565/sra.junctions.SRP014565.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP014565/sra.junctions.SRP014565.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP014565/sra.junctions.SRP014565.ALL.ID.gz SRP057065 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP057065/sra.gene_sums.SRP057065.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP057065/sra.exon_sums.SRP057065.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP057065/sra.junctions.SRP057065.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP057065/sra.junctions.SRP057065.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP057065/sra.junctions.SRP057065.ALL.ID.gz SRP117665 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP117665/sra.gene_sums.SRP117665.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP117665/sra.exon_sums.SRP117665.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP117665/sra.junctions.SRP117665.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP117665/sra.junctions.SRP117665.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP117665/sra.junctions.SRP117665.ALL.ID.gz SRP049465 human sra data_sources/sra data_sources http://idies.jhu.edu/recount3/data/human/data_sources/sra/gene_sums/65/SRP049465/sra.gene_sums.SRP049465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/exon_sums/65/SRP049465/sra.exon_sums.SRP049465.G026.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP049465/sra.junctions.SRP049465.ALL.MM.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP049465/sra.junctions.SRP049465.ALL.RR.gz http://idies.jhu.edu/recount3/data/human/data_sources/sra/junctions/65/SRP049465/sra.junctions.SRP049465.ALL.ID.gz The URL structure is: gene: &lt;recount3_url&gt;/&lt;organism&gt;/data_sources/&lt;data_source&gt;/gene_sums/&lt;last 2 project letters or digits&gt;/&lt;project&gt;/&lt;data_source&gt;.gene_sums.&lt;project&gt;.&lt;annotation file extension&gt;.gz exon: &lt;recount3_url&gt;/&lt;organism&gt;/data_sources/&lt;data_source&gt;/exon_sums/&lt;last 2 project letters or digits&gt;/&lt;project&gt;/&lt;data_source&gt;.exon_sums.&lt;project&gt;.&lt;annotation file extension&gt;.gz junctions: &lt;recount3_url&gt;/&lt;organism&gt;/data_sources/&lt;data_source&gt;/junctions/&lt;last 2 project letters or digits&gt;/&lt;project&gt;/&lt;data_source&gt;.junctions.&lt;project&gt;.&lt;junction type: typically ALL&gt;.&lt;junction file extension: RR, MM or ID&gt;.gz3 6.4 Project-level metadata files Every project from an original data source has 5 different sample metadata tables. These are: project_meta (sra, gtex, tcga): information mostly used by the R interface for locating files recount_project: information downloaded from the original data source, such as the SRA Run Table selector recount_qc: quality check fields using the QC annotation recount_seq_qc: sequence quantily check fields recount_pred: curated and predicted sample information described in the recount3 manuscript You can use the following R code to obtain the links to all these raw metadata files or use recount3::locate_url(). ## Obtain all the metadata files metadata_files &lt;- do.call(rbind, apply(projects, 1, function(x) { x &lt;- locate_url( project = x[[&quot;project&quot;]], project_home = x[[&quot;project_home&quot;]], type = &quot;metadata&quot;, organism = x[[&quot;organism&quot;]] ) res &lt;- data.frame(t(x)) colnames(res) &lt;- gsub(&quot;\\\\..*&quot;, &quot;&quot;, gsub(&quot;^[a-z]+\\\\.&quot;, &quot;&quot;, colnames(res))) colnames(res)[colnames(res) %in% unique(projects$file_source)] &lt;- &quot;project_meta&quot; return(res) })) dim(metadata_files) # [1] 18830 5 ## Export write.csv(metadata_files, file = &quot;recount3_metadata_files.csv&quot;, row.names = FALSE) As a teaser, here you can see the first 6 rows of this long table. Or you can download the CSV file to your computer from GitHub. If you want to, you can combine it with the project raw files table from the previous section. ## project_meta ## 1 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP107565/sra.sra.SRP107565.MD.gz ## 2 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP149665/sra.sra.SRP149665.MD.gz ## 3 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP017465/sra.sra.SRP017465.MD.gz ## 4 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP119165/sra.sra.SRP119165.MD.gz ## 5 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP133965/sra.sra.SRP133965.MD.gz ## 6 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP096765/sra.sra.SRP096765.MD.gz ## recount_project ## 1 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP107565/sra.recount_project.SRP107565.MD.gz ## 2 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP149665/sra.recount_project.SRP149665.MD.gz ## 3 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP017465/sra.recount_project.SRP017465.MD.gz ## 4 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP119165/sra.recount_project.SRP119165.MD.gz ## 5 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP133965/sra.recount_project.SRP133965.MD.gz ## 6 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP096765/sra.recount_project.SRP096765.MD.gz ## recount_qc ## 1 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP107565/sra.recount_qc.SRP107565.MD.gz ## 2 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP149665/sra.recount_qc.SRP149665.MD.gz ## 3 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP017465/sra.recount_qc.SRP017465.MD.gz ## 4 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP119165/sra.recount_qc.SRP119165.MD.gz ## 5 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP133965/sra.recount_qc.SRP133965.MD.gz ## 6 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP096765/sra.recount_qc.SRP096765.MD.gz ## recount_seq_qc ## 1 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP107565/sra.recount_seq_qc.SRP107565.MD.gz ## 2 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP149665/sra.recount_seq_qc.SRP149665.MD.gz ## 3 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP017465/sra.recount_seq_qc.SRP017465.MD.gz ## 4 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP119165/sra.recount_seq_qc.SRP119165.MD.gz ## 5 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP133965/sra.recount_seq_qc.SRP133965.MD.gz ## 6 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP096765/sra.recount_seq_qc.SRP096765.MD.gz ## recount_pred ## 1 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP107565/sra.recount_pred.SRP107565.MD.gz ## 2 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP149665/sra.recount_pred.SRP149665.MD.gz ## 3 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP017465/sra.recount_pred.SRP017465.MD.gz ## 4 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP119165/sra.recount_pred.SRP119165.MD.gz ## 5 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP133965/sra.recount_pred.SRP133965.MD.gz ## 6 http://idies.jhu.edu/recount3/data/human/data_sources/sra/metadata/65/SRP096765/sra.recount_pred.SRP096765.MD.gz The URL structure is: &lt;recount3_url&gt;/&lt;organism&gt;/data_sources/&lt;data_source&gt;/metadata/&lt;last 2 project letters or digits&gt;/&lt;project&gt;/&lt;data_source&gt;.&lt;table name&gt;.&lt;project&gt;.MD.gz 6.5 Sample-level BigWig files Each sample in recount3 has bigWig file publicly available and whose URL can be obtained using recount3::locate_url(). Below we show the URL for one such sample. locate_url( &quot;SRP009615&quot;, &quot;data_sources/sra&quot;, type = &quot;bw&quot;, sample = &quot;SRR387777&quot; ) ## sra.base_sums.SRP009615_SRR387777.ALL.bw ## &quot;http://duffel.rail.bio/recount3/human/data_sources/sra/base_sums/15/SRP009615/77/sra.base_sums.SRP009615_SRR387777.ALL.bw&quot; The URL structure is: &lt;recount3_url&gt;/&lt;organism&gt;/data_sources/&lt;data_source&gt;/base_sums/&lt;last 2 project letters or digits&gt;/&lt;project&gt;/&lt;last 2 sample letters or digits&gt;/&lt;data_source&gt;.base_sums.&lt;project&gt;_&lt;sample&gt;.ALL.bw Valid recount3_url options we support are http://duffel.rail.bio/recount3 and http://idies.jhu.edu/recount3/data. Only GTEx and TCGA have junction type UNIQUE available in addition to ALL.↩︎ "],["related-software.html", "7 Related software 7.1 Beyond recount3", " 7 Related software As part of recount3 we provide bigWig files for each sample. These files can be used to re-quantify the expression levels with new annotations using the same reference genomes. They can also be used to explore un-annotated regions of the genome. For recount3 we suggest using the megadepth R/Bioconductor package (or the command-line version) available from https://bioconductor.org/packages/megadepth. Additionally, we have written quite a bit of code for recount3 that is is available through different GitHub repositories. You can find our main products at recount.bio.4 Some of our software related to recount3 are highlighted below. R/Bioconductor related: recount3: https://github.com/LieberInstitute/recount3 or https://bioconductor.org/packages/recount3 megadepth: https://github.com/LieberInstitute/megadepth or https://bioconductor.org/packages/megadepth snapcount: https://github.com/langmead-lab/snapcount or https://bioconductor.org/packages/snapcount Tools: Megadepth: https://github.com/ChristopherWilks/megadepth also available from anaconda at https://anaconda.org/bioconda/megadepth Snaptron: https://github.com/ChristopherWilks/snaptron Monorail system related: monorail-external: https://github.com/langmead-lab/monorail-external recount-pump: https://github.com/langmead-lab/recount-pump recount-unify: https://github.com/langmead-lab/recount-unify Documentation related: recount3-docs: https://github.com/LieberInstitute/recount3-docs (where this website is created) duffel: https://github.com/nellore/duffel for providing permalinks 7.1 Beyond recount3 We have more software beyond recount3 including: recount: https://bioconductor.org/packages/recount (for accessing the recount2 data) ASCOT: http://ascot.cs.jhu.edu/ recountmethylation: https://bioconductor.org/packages/recountmethylation Rail-RNA and Rail-dbGaP: http://rail.bio/ derfinder: https://bioconductor.org/packages/derfinder recount.bwtool: https://github.com/LieberInstitute/recount.bwtool (now defunct given megadepth which is much faster, easy to install, and available through Bioconductor) Documentation related: recount-website: https://github.com/leekgroup/recount-website for recount2 recountWorkflow: https://bioconductor.org/packages/recountWorkflow and several workshops such as https://github.com/LieberInstitute/recountWorkshop2020 recount-contributions: https://github.com/leekgroup/recount-contributions (now defunct given how you can use the Monorail system to process your data and share it with us) Some other software we have written can be found at: https://github.com/ChristopherWilks?tab=repositories https://github.com/langmead-lab?tab=repositories https://github.com/LieberInstitute?tab=repositories https://github.com/kasperdanielhansen?tab=repositories https://github.com/nellore?tab=repositories https://github.com/leekgroup?tab=repositories https://github.com/lcolladotor?tab=repositories Test version is available at http://nellore.bio/recount-landing/.↩︎ "],["related-analyses.html", "8 Related analyses 8.1 Beyond recount3", " 8 Related analyses The code for the analyses shown in the recount3 paper is available through the following GitHub repositories. Re-analyses of Intropolis, ASCOT, FANTOM-CAT, and Zhang et al’s data: https://github.com/ChristopherWilks/monorail_paper Human gene-level analyses: https://github.com/hansenlab/recount3_human_gene Mouse gene-level analyses: https://github.com/hansenlab/recount3_mouse_gene 8.1 Beyond recount3 Some analyses beyond recount3 are available through the following locations: runs: https://github.com/nellore/runs for processing the data behind Intropolis and recount2 with Rail-RNA fcr2: https://github.com/eddieimada/fcr2, with https://github.com/LieberInstitute/marchionni_projects as a companion repository recount-analyses: https://github.com/leekgroup/recount-analyses for recount2 intropolis: https://github.com/nellore/intropolis phenopredict: https://github.com/leekgroup/phenopredict, https://github.com/ShanEllis/phenopredict_phenotypes and https://github.com/ShanEllis/phenopredict_usecase recount-brain: https://github.com/LieberInstitute/recount-brain which is an example collection insp: https://github.com/LieberInstitute/insp which is an example use case of recount.bwtool recountNNLS: https://github.com/JMF47/recountNNLS recount_pandey: https://github.com/LieberInstitute/recount_pandey which involved modifying code from recount-website/recount-prep "],["your-data.html", "9 Your data 9.1 Process your data 9.2 Contribute your collections", " 9 Your data Note that this section will need to be refined once we have gone through this process. Currently we are focused on releasing the initial version of recount3. 9.1 Process your data While recount_pump contains code for generating recount3, if you want to use the Monorail RNA-seq processing pipeline (alignment/quantification) for your own data, we highly recommend that you start by looking at the monorail-external GitHub repository. It contains a very detailed README with instructions on how to install the software, download the annotation files, and process raw RNA-seq data (with some example files used for illustration purposes). In order to add your data to recount3, we will need all the raw files for your study. That is: the gene count text files for each annotation we support (organism-dependent) similarly, the exon count text files for each annotation the exon-exon junction files5 the five metadata files the bigWig files for each sample We will then need to organize your data into the directory structure expected by recount3. 9.2 Contribute your collections As described in the raw files section, collections involve creating a metadata file for a custom set of samples across one or more studies (typically more than one study). You can find some example collections at http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/. For example, http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/gtex_geuvadis/metadata/ contains two files: &lt;collection_name&gt;.custom.gz: gtex_geuvadis.custom.gz &lt;collection_name&gt;.recount_project.gz: gtex_geuvadis.recount_project.gz (optional!) These files include the 3 columns we use internally for identifying all samples: rail_id: used by Snaptron study: the project name. See recount3::available_projects() for supported options (or use your own custom recount3_url). external_id: typically the SRA run ID but each data source has different unique IDs, like TCGA which uses much longer sample IDs. 9.2.1 Collection metadata The &lt;collection_name&gt;.custom.gz can then contain any additional columns of interest. For example, in the recount-brain project we manually curated samples from 62 studies and standardized variables across the 62 studies. Here’s how the example collection metadata file looks like: read.delim( recount3::file_retrieve( &quot;http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/gtex_geuvadis/metadata/gtex_geuvadis.custom.gz&quot; ) ) ## 2021-08-20 20:25:23 caching file gtex_geuvadis.custom.gz. ## adding rname &#39;http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/gtex_geuvadis/metadata/gtex_geuvadis.custom.gz&#39; ## rail_id external_id study sequencing_type tissue ## 1 98371 ERR188021 ERP001942 bulk LCL ## 2 153881 GTEX-U3ZM-0826-SM-4DXU6.1 BLADDER bulk BLADDER This file has to be readble with R using the following code: utils::read.delim( file_path, sep = &quot;\\t&quot;, check.names = FALSE, quote = &quot;&quot;, comment.char = &quot;&quot; ) Since this is the main file that needs to be produced for adding a collection to recount3, if your collection involves data that is already present in recount3, it will be very easy for us to add it to our resource. Otherwise we will need the raw files for the corresponding new data. 9.2.2 Collection project location The second text file specifies the required information for locating the samples. While we had considered using this type of file, we don’t require it anymore. For historical purposes, this is how that file looked:6 read.delim( recount3::file_retrieve( &quot;http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/gtex_geuvadis/metadata/gtex_geuvadis.recount_project.gz&quot; ) ) ## 2021-08-20 20:25:24 caching file gtex_geuvadis.recount_project.gz. ## adding rname &#39;http://snaptron.cs.jhu.edu/data/temp/recount3/human/collections/gtex_geuvadis/metadata/gtex_geuvadis.recount_project.gz&#39; ## rail_id external_id study project organism ## 1 98371 ERR188021 ERP001942 ERP001942 Homo sapiens ## 2 153881 GTEX-U3ZM-0826-SM-4DXU6.1 BLADDER BLADDER Homo sapiens ## file_source metadata_source date_processed ## 1 data_sources/sra collections/gtex_geuvadis 2019-10-01 ## 2 data_sources/gtex collections/gtex_geuvadis 2019-11-01 Hm… I think this will be tricky if new exon-exon junctions are found in someone’s data which are absent in recount3. This is VERY likely to happen!↩︎ Once we have more collections I can verify this!↩︎ "],["join-the-recount-team.html", "10 Join the ReCount team!", " 10 Join the ReCount team! We have multiple positions available! The ReCount project involves the Hansen, Leek, Langmead and Battle labs at JHU &amp; the Nellore lab at OHSU &amp; the Collado-Torres lab at LIBD. Contact: Kasper D. Hansen Ben Langmead Leonardo Collado-Torres Abhinav Nellore Alexis Battle Jeff Leek "],["r-session-information.html", "R session information", " R session information This book was last updated on 2021-08-20 20:25:25. Details on the R version used for making this book. The source code is available at LieberInstitute/recount3-docs. ## Load the package at the top of your script library(&quot;sessioninfo&quot;) ## Reproducibility information print(&#39;Reproducibility information:&#39;) ## [1] &quot;Reproducibility information:&quot; Sys.time() ## [1] &quot;2021-08-20 20:25:25 UTC&quot; proc.time() ## user system elapsed ## 28.326 1.317 78.183 options(width = 120) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.0 (2021-05-18) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz UTC ## date 2021-08-20 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.1.0) ## Biobase * 2.53.0 2021-05-19 [1] Bioconductor ## BiocFileCache 2.1.1 2021-06-23 [1] Bioconductor ## BiocGenerics * 0.39.2 2021-08-18 [1] Bioconductor ## BiocIO 1.3.0 2021-05-19 [1] Bioconductor ## BiocManager 1.30.16 2021-06-15 [2] CRAN (R 4.1.0) ## BiocParallel 1.27.3 2021-08-09 [1] Bioconductor ## BiocStyle * 2.21.3 2021-06-16 [1] Bioconductor ## Biostrings 2.61.2 2021-08-04 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] RSPM (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] RSPM (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] RSPM (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] RSPM (R 4.1.0) ## bookdown 0.22 2021-04-22 [1] RSPM (R 4.1.0) ## bslib 0.2.5.1 2021-05-18 [1] RSPM (R 4.1.0) ## cachem 1.0.5 2021-05-15 [2] RSPM (R 4.1.0) ## cli 3.0.1 2021-07-17 [2] RSPM (R 4.1.0) ## cmdfun 1.0.2 2020-10-10 [1] RSPM (R 4.1.0) ## crayon 1.4.1 2021-02-08 [2] RSPM (R 4.1.0) ## curl 4.3.2 2021-06-23 [2] RSPM (R 4.1.0) ## data.table 1.14.0 2021-02-21 [1] RSPM (R 4.1.0) ## DBI 1.1.1 2021-01-15 [1] RSPM (R 4.1.0) ## dbplyr 2.1.1 2021-04-06 [1] RSPM (R 4.1.0) ## DelayedArray 0.19.1 2021-06-25 [1] Bioconductor ## desc 1.3.0 2021-03-05 [2] RSPM (R 4.1.0) ## digest 0.6.27 2020-10-24 [2] RSPM (R 4.1.0) ## dplyr 1.0.7 2021-06-18 [2] RSPM (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [2] RSPM (R 4.1.0) ## evaluate 0.14 2019-05-28 [2] RSPM (R 4.1.0) ## fansi 0.5.0 2021-05-25 [2] RSPM (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [2] RSPM (R 4.1.0) ## filelock 1.0.2 2018-10-05 [1] RSPM (R 4.1.0) ## fs 1.5.0 2020-07-31 [2] RSPM (R 4.1.0) ## generics 0.1.0 2020-10-31 [2] RSPM (R 4.1.0) ## GenomeInfoDb * 1.29.3 2021-07-01 [1] Bioconductor ## GenomeInfoDbData 1.2.6 2021-08-20 [1] Bioconductor ## GenomicAlignments 1.29.0 2021-05-19 [1] Bioconductor ## GenomicRanges * 1.45.0 2021-05-19 [1] Bioconductor ## glue 1.4.2 2020-08-27 [2] RSPM (R 4.1.0) ## highr 0.9 2021-04-16 [2] RSPM (R 4.1.0) ## hms 1.1.0 2021-05-17 [1] RSPM (R 4.1.0) ## htmltools 0.5.1.1 2021-01-22 [1] RSPM (R 4.1.0) ## httr 1.4.2 2020-07-20 [2] RSPM (R 4.1.0) ## IRanges * 2.27.2 2021-08-18 [1] Bioconductor ## jquerylib 0.1.4 2021-04-26 [1] RSPM (R 4.1.0) ## jsonlite 1.7.2 2020-12-09 [2] RSPM (R 4.1.0) ## knitr 1.33 2021-04-24 [2] RSPM (R 4.1.0) ## lattice 0.20-44 2021-05-02 [3] CRAN (R 4.1.0) ## lifecycle 1.0.0 2021-02-15 [2] RSPM (R 4.1.0) ## magrittr 2.0.1 2020-11-17 [2] RSPM (R 4.1.0) ## Matrix 1.3-4 2021-06-01 [2] RSPM (R 4.1.0) ## MatrixGenerics * 1.5.3 2021-08-05 [1] Bioconductor ## matrixStats * 0.60.0 2021-07-26 [1] RSPM (R 4.1.0) ## megadepth * 1.3.3 2021-08-20 [1] Github (LieberInstitute/megadepth@6ea0179) ## memoise 2.0.0 2021-01-26 [2] RSPM (R 4.1.0) ## pillar 1.6.2 2021-07-29 [2] RSPM (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [2] RSPM (R 4.1.0) ## pkgload 1.2.1 2021-04-06 [2] RSPM (R 4.1.0) ## postcards * 0.2.2 2021-07-31 [1] RSPM (R 4.1.0) ## purrr * 0.3.4 2020-04-17 [2] RSPM (R 4.1.0) ## R.methodsS3 1.8.1 2020-08-26 [1] RSPM (R 4.1.0) ## R.oo 1.24.0 2020-08-26 [1] RSPM (R 4.1.0) ## R.utils 2.10.1 2020-08-26 [1] RSPM (R 4.1.0) ## R6 2.5.0 2020-10-28 [2] RSPM (R 4.1.0) ## rappdirs 0.3.3 2021-01-31 [2] RSPM (R 4.1.0) ## Rcpp 1.0.7 2021-07-07 [2] RSPM (R 4.1.0) ## RCurl 1.98-1.3 2021-03-16 [1] RSPM (R 4.1.0) ## readr 2.0.0 2021-07-20 [1] RSPM (R 4.1.0) ## recount3 * 1.3.5 2021-08-20 [1] Github (LieberInstitute/recount3@57e56bd) ## restfulr 0.0.13 2017-08-06 [1] RSPM (R 4.1.0) ## rjson 0.2.20 2018-06-08 [1] RSPM (R 4.1.0) ## rlang 0.4.11 2021-04-30 [2] RSPM (R 4.1.0) ## rmarkdown 2.10 2021-08-06 [1] RSPM (R 4.1.0) ## rprojroot 2.0.2 2020-11-15 [2] RSPM (R 4.1.0) ## Rsamtools 2.9.1 2021-06-17 [1] Bioconductor ## RSQLite 2.2.7 2021-04-22 [1] RSPM (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [2] RSPM (R 4.1.0) ## rtracklayer 1.53.1 2021-08-13 [1] Bioconductor ## S4Vectors * 0.31.1 2021-08-18 [1] Bioconductor ## sass 0.4.0 2021-05-12 [1] RSPM (R 4.1.0) ## sessioninfo * 1.1.1 2018-11-05 [2] RSPM (R 4.1.0) ## snapcount * 1.3.1 2021-08-20 [1] Github (langmead-lab/snapcount@19cf747) ## stringi 1.7.3 2021-07-16 [2] RSPM (R 4.1.0) ## stringr 1.4.0 2019-02-10 [2] RSPM (R 4.1.0) ## SummarizedExperiment * 1.23.1 2021-06-24 [1] Bioconductor ## testthat 3.0.4 2021-07-01 [2] RSPM (R 4.1.0) ## tibble 3.1.3 2021-07-23 [2] RSPM (R 4.1.0) ## tidyselect 1.1.1 2021-04-30 [2] RSPM (R 4.1.0) ## tzdb 0.1.2 2021-07-20 [1] RSPM (R 4.1.0) ## utf8 1.2.2 2021-07-24 [2] RSPM (R 4.1.0) ## vctrs 0.3.8 2021-04-29 [2] RSPM (R 4.1.0) ## vroom 1.5.4 2021-08-05 [1] RSPM (R 4.1.0) ## withr 2.4.2 2021-04-18 [2] RSPM (R 4.1.0) ## xfun 0.25 2021-08-06 [2] RSPM (R 4.1.0) ## XML 3.99-0.6 2021-03-16 [1] RSPM (R 4.1.0) ## XVector 0.33.0 2021-05-19 [1] Bioconductor ## yaml 2.2.1 2020-02-01 [2] RSPM (R 4.1.0) ## zlibbioc 1.39.0 2021-05-19 [1] Bioconductor ## ## [1] /usr/local/lib/R/host-site-library ## [2] /usr/local/lib/R/site-library ## [3] /usr/local/lib/R/library "],["references.html", "References", " References "]]
